{"version":3,"sources":["logo.svg","core/keyboard.ts","components/path-number.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","KeyboardKey","KeyboardKeyCode","alphabet","letterOrNumberRegExp","PathNumberComponent","state","numToCheckInput","pathNumber","undefined","numInputEmitter","Subject","numInput$","asObservable","onNumInputKeyUp","event","console","log","key","keyCode","which","charCode","onNumInputKeyDown","Enter","preventDefault","onNumInputEnter","Backspace","length","lastCharIdx","withoutLastChar","substr","next","cleanUp","onNumInputChange","value","target","calculatePathNumberFromInput","Number","MAX_VALUE","newValue","sanitizeLetters","setState","prevState","greeting","calculatePathNumber","replaceLettersWithDigits","calculateDatePathNumber","today","Date","dateNum","getFullYear","getMonth","getDate","strNum","calculateDigitsSum","message","info","input","split","map","char","match","warn","join","letters","letterOrDigit","idx","indexOf","toUpperCase","digit","parseInt","filter","num","sum","str","reduce","acc","isNaN","this","pipe","debounceTime","subscribe","renderCustomNumInputForm","className","color","placeholder","name","onChange","autoComplete","onKeyDown","onKeyUp","addonType","outline","onClick","Component","App","src","logo","alt","href","rel","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0c56fe3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","/**\r\n* Representaton values of the KeyboardEvent Keys\r\n* @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n*/\r\nexport enum KeyboardKey {\r\n\r\n  // ------------------------------------------\r\n  // Special values\r\n  // ------------------------------------------\r\n  /**\r\n   * The user agent wasn't able to map the event's virtual keycode to a specific key value.\r\n   * Relevant on mobile.\r\n   */\r\n  Unidentified = 'Unidentified',\r\n\r\n  // ------------------------------------------\r\n  // Modifier keys\r\n  // ------------------------------------------\r\n  CapsLock = 'CapsLock',\r\n  Alt = 'Alt',\r\n  Control = 'Control',\r\n  Fn = 'Fn',\r\n  Shift = 'Shift',\r\n\r\n  // ------------------------------------------\r\n  // Whitespace keys\r\n  // ------------------------------------------\r\n  Enter = 'Enter',\r\n  Tab = 'Tab',\r\n  SpaceBar = ' ',\r\n\r\n  // ------------------------------------------\r\n  // Editing keys\r\n  // ------------------------------------------\r\n  Backspace = 'Backspace',\r\n  Delete = 'Delete',\r\n}\r\n\r\nexport enum KeyboardKeyCode {\r\n  // ------------------------------------------\r\n  // Whitespace keys\r\n  // ------------------------------------------\r\n  Enter = 13,\r\n  Tab = 9,\r\n  SpaceBar = 32,\r\n  // ------------------------------------------\r\n  // Editing keys\r\n  // ------------------------------------------\r\n  Backspace = 8,\r\n  Delete = 46,\r\n  // Special mobile keys\r\n  /**\r\n   * happens on mobile as Preceding Placeholder key for special char\r\n   * or just for all keys which wasn't mapped (e.g. Backspace, Space, etc.)\r\n   */\r\n  Unidentified = 229,\r\n}\r\n","import React, { Component, SyntheticEvent } from 'react';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport InputGroup from 'reactstrap/lib/InputGroup';\r\nimport Input from 'reactstrap/lib/Input';\r\nimport Button from 'reactstrap/lib/Button';\r\nimport InputGroupAddon from 'reactstrap/lib/InputGroupAddon';\r\nimport Badge from 'reactstrap/lib/Badge';\r\nimport { KeyboardKey } from '../core/keyboard';\r\n\r\ninterface PathNumberState {\r\n  greeting?: string,\r\n  numToCheckInput: string,\r\n  pathNumber: number | undefined\r\n}\r\n\r\nconst alphabet = [\r\n  'A','B','C','D','E','F','G','H','I',\r\n  'J','K','L','M','N','O','P','Q','R',\r\n  'S','T','U','V','W','X','Y','Z'\r\n]\r\nconst letterOrNumberRegExp = /^[0-9a-zA-Z]+$/\r\n\r\nexport class PathNumberComponent extends Component<{},PathNumberState> {\r\n\r\n  state: PathNumberState = {\r\n    numToCheckInput: '',\r\n    pathNumber: undefined\r\n  };\r\n\r\n  readonly numInputEmitter = new Subject<string>();\r\n  readonly numInput$: Observable<string> = this.numInputEmitter.asObservable();\r\n\r\n  componentDidMount(): void {\r\n    this.numInput$.pipe(\r\n      debounceTime(100)\r\n    ).subscribe(\r\n      (input) => this.calculatePathNumberFromInput(input)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>{this.renderCustomNumInputForm()}</div>\r\n    )\r\n  }\r\n\r\n  renderCustomNumInputForm(){\r\n    return (\r\n      <div className={'path-number-form'}>\r\n        <h2>Good Luck: <Badge color=\"success\">\r\n          {this.state.pathNumber || this.state.greeting || '#'}\r\n        </Badge></h2>\r\n        <InputGroup>\r\n          <Input\r\n            placeholder=\"check number\"\r\n            name=\"numToCheckInput\"\r\n            value={this.state.numToCheckInput}\r\n            onChange={this.onNumInputChange}\r\n            autoComplete={'off'}\r\n            onKeyDown={this.onNumInputKeyDown}\r\n            onKeyUp={this.onNumInputKeyUp}\r\n            /* no keypress on mobile */\r\n          />\r\n          <InputGroupAddon addonType=\"append\">\r\n            <Button outline color=\"success\" onClick={this.cleanUp}>\r\n              {'Let Go'}\r\n            </Button>\r\n          </InputGroupAddon>\r\n        </InputGroup>\r\n        <Button outline color=\"info\" onClick={this.calculateDatePathNumber}>\r\n          {'Today\\'s Date'}\r\n        </Button>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  onNumInputKeyUp = (event: React.KeyboardEvent) => {\r\n    console.log(`keyup: ${event.key} code: ${event.keyCode} which: ${event.which} charCode: ${event.charCode}`);\r\n  };\r\n\r\n  onNumInputKeyDown = (event: React.KeyboardEvent) => {\r\n    // commented for less output\r\n    // console.log(`keydown: ${event.key} code: ${event.keyCode} which: ${event.which} charCode: ${event.charCode}`);\r\n    if (event.key === KeyboardKey.Enter) {\r\n      event.preventDefault();\r\n      this.onNumInputEnter();\r\n    }\r\n    if (event.key === KeyboardKey.Backspace) {\r\n      event.preventDefault();\r\n      const { length } = this.state.numToCheckInput;\r\n      const lastCharIdx = length > 0 ? length - 1 : 0;\r\n      const withoutLastChar = this.state.numToCheckInput.substr(0, lastCharIdx);\r\n      this.numInputEmitter.next(withoutLastChar);\r\n    }\r\n  };\r\n\r\n  onNumInputEnter = () => {\r\n    this.cleanUp();\r\n  };\r\n\r\n  onNumInputChange = (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    const { value } = event.target as HTMLInputElement;\r\n    this.numInputEmitter.next(value);\r\n  };\r\n\r\n  calculatePathNumberFromInput = (value: string) => {\r\n    if (+value >= Number.MAX_VALUE) {\r\n      return;\r\n    }\r\n\r\n    const newValue: string = this.sanitizeLetters(value)\r\n\r\n    this.setState((prevState) => (\r\n      {\r\n        ...prevState,\r\n        greeting: undefined,\r\n        numToCheckInput: newValue\r\n      })\r\n    );\r\n\r\n    this.calculatePathNumber(this.replaceLettersWithDigits(newValue));\r\n  };\r\n\r\n  cleanUp = () => {\r\n    this.setState({\r\n      greeting: '♥️',\r\n      numToCheckInput: '',\r\n      pathNumber: undefined\r\n    });\r\n  };\r\n\r\n  calculateDatePathNumber = () => {\r\n     const today = new Date();\r\n     const dateNum = ''\r\n       + today.getFullYear()\r\n       + (today.getMonth() + 1)\r\n       + today.getDate();\r\n     this.calculatePathNumberFromInput(dateNum);\r\n  };\r\n\r\n  calculatePathNumber = (strNum: string | number): void => {\r\n     const pathNumber = this.calculateDigitsSum(strNum);\r\n\r\n     const message = `Path number is: ${pathNumber}`;\r\n     console.info(message);\r\n\r\n    this.setState((prevState) => ({ ...prevState, pathNumber }));\r\n  };\r\n\r\n  sanitizeLetters = (input: string): string => {\r\n    return ('' + input).split('')\r\n      .map((char) => { // sanitize value\r\n        if (char.match(letterOrNumberRegExp)) {\r\n          return char;\r\n        } else {\r\n          console.warn(`Value was sanitized: ${char}`);\r\n          return '';\r\n        }\r\n      })\r\n      .join('');\r\n  }\r\n\r\n  replaceLettersWithDigits = (letters: string): string => {\r\n    return ('' + letters).split('')\r\n      .map(letterOrDigit => { // replace letter with digit\r\n        const idx = alphabet.indexOf(letterOrDigit.toUpperCase());\r\n        if (idx !== -1) {\r\n          console.warn(`Letter ${letterOrDigit} was converted to: ${idx + 1}`);\r\n          return idx + 1;\r\n        }\r\n        const digit = parseInt(letterOrDigit, 10);\r\n        return digit ?? -1;\r\n      })\r\n      .filter(num => num > 0)\r\n      .join('');\r\n  }\r\n\r\n  calculateDigitsSum = (strNum: string | number): number | undefined => {\r\n    const sum: number = ('' + strNum).split('')\r\n      .map((str) => parseInt(str, 10))\r\n      .reduce((acc, digit) => acc + digit, 0);\r\n\r\n    if (isNaN(sum)) {\r\n      return undefined;\r\n    }\r\n\r\n    return sum < 10\r\n      ? sum\r\n      : this.calculateDigitsSum(sum);\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport { PathNumberComponent } from './components/path-number.component';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const today = new Date();\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <PathNumberComponent/>\r\n        </header>\r\n        <footer className=\"App-footer\">\r\n          {today.getFullYear()} | © <a href=\"https://bit.ly/andriim\" rel=\"noopener\" target=\"_blank\">am0wa</a> | <a href=\"https://bit.ly/am0wa-donate\" rel=\"noopener\" target=\"_blank\">Donate</a>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}