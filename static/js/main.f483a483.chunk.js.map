{"version":3,"sources":["logo.svg","core/keyboard.ts","components/path-number.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","KeyboardKey","KeyboardKeyCode","PathNumberComponent","state","numToCheckInput","pathNumber","undefined","numInputEmitter","Subject","numInput$","asObservable","onNumInputKeyUp","event","console","log","key","keyCode","which","charCode","onNumInputKeyDown","Enter","preventDefault","onNumInputEnter","Backspace","length","lastCharIdx","withoutLastChar","substr","next","cleanUp","onNumInputChange","value","target","calculatePathNumberFromInput","Number","MAX_VALUE","newValue","isNaN","parseFloat","setState","prevState","greeting","calculatePathNumber","calculateDatePathNumber","today","Date","dateNum","getFullYear","getMonth","getDate","strNum","calculateDigitsSum","message","info","sum","split","map","str","parseInt","reduce","acc","digit","this","pipe","debounceTime","subscribe","input","renderCustomNumInputForm","className","color","placeholder","name","onChange","autoComplete","onKeyDown","onKeyUp","addonType","outline","onClick","Component","App","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f483a483.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\r\n* Representaton values of the KeyboardEvent Keys\r\n* @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n*/\r\nexport enum KeyboardKey {\r\n\r\n  // ------------------------------------------\r\n  // Special values\r\n  // ------------------------------------------\r\n  /**\r\n   * The user agent wasn't able to map the event's virtual keycode to a specific key value.\r\n   * Relevant on mobile.\r\n   */\r\n  Unidentified = 'Unidentified',\r\n\r\n  // ------------------------------------------\r\n  // Modifier keys\r\n  // ------------------------------------------\r\n  CapsLock = 'CapsLock',\r\n  Alt = 'Alt',\r\n  Control = 'Control',\r\n  Fn = 'Fn',\r\n  Shift = 'Shift',\r\n\r\n  // ------------------------------------------\r\n  // Whitespace keys\r\n  // ------------------------------------------\r\n  Enter = 'Enter',\r\n  Tab = 'Tab',\r\n  SpaceBar = ' ',\r\n\r\n  // ------------------------------------------\r\n  // Editing keys\r\n  // ------------------------------------------\r\n  Backspace = 'Backspace',\r\n  Delete = 'Delete',\r\n}\r\n\r\nexport enum KeyboardKeyCode {\r\n  // ------------------------------------------\r\n  // Whitespace keys\r\n  // ------------------------------------------\r\n  Enter = 13,\r\n  Tab = 9,\r\n  SpaceBar = 32,\r\n  // ------------------------------------------\r\n  // Editing keys\r\n  // ------------------------------------------\r\n  Backspace = 8,\r\n  Delete = 46,\r\n  // Special mobile keys\r\n  /**\r\n   * happens on mobile as Preceding Placeholder key for special char\r\n   * or just for all keys which wasn't mapped (e.g. Backspace, Space, etc.)\r\n   */\r\n  Unidentified = 229,\r\n}\r\n","import React, { Component, SyntheticEvent } from 'react';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime, throttleTime } from 'rxjs/operators';\r\n\r\nimport InputGroup from 'reactstrap/lib/InputGroup';\r\nimport Input from 'reactstrap/lib/Input';\r\nimport Button from 'reactstrap/lib/Button';\r\nimport InputGroupAddon from 'reactstrap/lib/InputGroupAddon';\r\nimport Badge from 'reactstrap/lib/Badge';\r\nimport { KeyboardKey } from '../core/keyboard';\r\n\r\ninterface PathNumberState {\r\n  greeting?: string,\r\n  numToCheckInput: string,\r\n  pathNumber: number | undefined\r\n}\r\n\r\nexport class PathNumberComponent extends Component<{},PathNumberState> {\r\n\r\n  state: PathNumberState = {\r\n    numToCheckInput: '',\r\n    pathNumber: undefined\r\n  };\r\n\r\n  readonly numInputEmitter = new Subject<string>();\r\n  readonly numInput$: Observable<string> = this.numInputEmitter.asObservable();\r\n\r\n  componentDidMount(): void {\r\n    this.numInput$.pipe(\r\n      debounceTime(100)\r\n    ).subscribe(\r\n      (input) => this.calculatePathNumberFromInput(input)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>{this.renderCustomNumInputForm()}</div>\r\n    )\r\n  }\r\n\r\n  renderCustomNumInputForm(){\r\n    return (\r\n      <div className={'path-number-form'}>\r\n        <h2>Good Luck: <Badge color=\"success\">\r\n          {this.state.pathNumber || this.state.greeting || '#'}\r\n        </Badge></h2>\r\n        <InputGroup>\r\n          <Input\r\n            placeholder=\"check number\"\r\n            name=\"numToCheckInput\"\r\n            value={this.state.numToCheckInput}\r\n            onChange={this.onNumInputChange}\r\n            autoComplete={'off'}\r\n            onKeyDown={this.onNumInputKeyDown}\r\n            onKeyUp={this.onNumInputKeyUp}\r\n            /* no keypress on mobile */\r\n          />\r\n          <InputGroupAddon addonType=\"append\">\r\n            <Button outline color=\"success\" onClick={this.cleanUp}>\r\n              {'Let Go'}\r\n            </Button>\r\n          </InputGroupAddon>\r\n        </InputGroup>\r\n        <Button outline color=\"info\" onClick={this.calculateDatePathNumber}>\r\n          {'Today\\'s Date'}\r\n        </Button>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  onNumInputKeyUp = (event: React.KeyboardEvent) => {\r\n    console.log(`keyup: ${event.key} code: ${event.keyCode} which: ${event.which} charCode: ${event.charCode}`);\r\n  };\r\n\r\n  onNumInputKeyDown = (event: React.KeyboardEvent) => {\r\n    console.log(`keydown: ${event.key} code: ${event.keyCode} which: ${event.which} charCode: ${event.charCode}`);\r\n    if (event.key === KeyboardKey.Enter) {\r\n      event.preventDefault();\r\n      this.onNumInputEnter();\r\n    }\r\n    if (event.key === KeyboardKey.Backspace) {\r\n      event.preventDefault();\r\n      const { length } = this.state.numToCheckInput;\r\n      const lastCharIdx = length > 0 ? length - 1 : 0;\r\n      const withoutLastChar = this.state.numToCheckInput.substr(0, lastCharIdx);\r\n      this.numInputEmitter.next(withoutLastChar);\r\n    }\r\n  };\r\n\r\n  onNumInputEnter = () => {\r\n    this.cleanUp();\r\n  };\r\n\r\n  onNumInputChange = (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    const { value } = event.target as HTMLInputElement;\r\n    this.numInputEmitter.next(value);\r\n  };\r\n\r\n  calculatePathNumberFromInput = (value: string) => {\r\n    if (+value >= Number.MAX_VALUE) {\r\n      return;\r\n    }\r\n    \r\n    const newValue: string = !isNaN(parseFloat(value))\r\n      ? value\r\n      : '';\r\n    \r\n    this.setState((prevState) => (\r\n      {\r\n        ...prevState,\r\n        greeting: undefined,\r\n        numToCheckInput: newValue\r\n      })\r\n    );\r\n\r\n    this.calculatePathNumber(newValue);\r\n  };\r\n\r\n  cleanUp = () => {\r\n    this.setState({\r\n      greeting: '♥️',\r\n      numToCheckInput: '',\r\n      pathNumber: undefined\r\n    });\r\n  };\r\n\r\n  calculateDatePathNumber = () => {\r\n     const today = new Date();\r\n     const dateNum = ''\r\n       + today.getFullYear()\r\n       + (today.getMonth() + 1)\r\n       + today.getDate();\r\n     this.calculatePathNumberFromInput(dateNum);\r\n  };\r\n\r\n  calculatePathNumber = (strNum: string | number): void => {\r\n    console.log('> calculate Initial: ' + strNum);\r\n     const pathNumber = this.calculateDigitsSum(strNum);\r\n\r\n     const message = `Path number is: ${pathNumber}`;\r\n     console.info(message);\r\n\r\n    this.setState((prevState) => ({ ...prevState, pathNumber }));\r\n  };\r\n\r\n  calculateDigitsSum = (strNum: string | number): number | undefined => {\r\n    const sum: number = ('' + strNum).split('')\r\n      .map((str) => parseInt(str, 10))\r\n      .reduce((acc, digit) => acc + digit, 0);\r\n\r\n    if (isNaN(sum)) {\r\n      return undefined;\r\n    }\r\n    if (sum < 10) {\r\n      return sum;\r\n    }\r\n    console.log('>> calculate further: ' + sum);\r\n    return this.calculateDigitsSum(sum);\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\n\nimport { PathNumberComponent } from './components/path-number.component';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const today = new Date();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <PathNumberComponent/>\n        </header>\n        <footer className=\"App-footer\">\n          {today.getFullYear()} | © <a href=\"https://bit.ly/andriim\" rel=\"noopener\" target=\"_blank\">am0wa</a> | <a href=\"https://bit.ly/am0wa-donate\" rel=\"noopener\" target=\"_blank\">Donate</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}