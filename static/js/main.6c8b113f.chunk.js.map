{"version":3,"sources":["logo.svg","components/path-number.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PathNumberComponent","state","numToCheckInput","pathNumber","undefined","numInputEmitter","Subject","numInput$","asObservable","onNumInputChange","event","value","target","next","calculatePathNumberFromInput","newValue","parseInt","setState","prevState","greeting","calculatePathNumber","cleanUp","calculateDatePathNumber","today","Date","dateNum","getFullYear","getMonth","getDate","strNum","calculateDigitsSum","message","console","info","sum","split","map","str","reduce","acc","digit","this","pipe","debounceTime","subscribe","input","renderCustomNumInputForm","className","color","placeholder","name","onChange","addonType","outline","onClick","Component","App","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,+SCgB9BC,EAAb,4MAEEC,MAAyB,CACvBC,gBAAiB,GACjBC,gBAAYC,GAJhB,EAOWC,gBAAkB,IAAIC,IAPjC,EAQWC,UAAgC,EAAKF,gBAAgBG,eARhE,EAkDEC,iBAAmB,SAACC,GAA2B,IACrCC,EAAUD,EAAME,OAAhBD,MACR,EAAKN,gBAAgBQ,KAAKF,IApD9B,EAuDEG,6BAA+B,SAACH,GAC9B,IAAMI,EAAWC,SAASL,EAAO,KAAO,GACxC,EAAKM,UAAS,SAACC,GAAD,sBAEPA,EAFO,CAGVC,cAAUf,EACVF,gBAAiB,GAAKa,OAI1B,EAAKK,oBAAoBL,IAjE7B,EAoEEM,QAAU,WACR,EAAKJ,SAAS,CACZE,SAAU,eACVjB,gBAAiB,GACjBC,gBAAYC,KAxElB,EA4EEkB,wBAA0B,WACvB,IAAMC,EAAQ,IAAIC,KACZC,EAAU,GACZF,EAAMG,eACLH,EAAMI,WAAa,GACpBJ,EAAMK,UACV,EAAKd,6BAA6BW,IAlFvC,EAqFEL,oBAAsB,SAACS,GACpB,IAAM1B,EAAa,EAAK2B,mBAAmBD,GAErCE,EAAO,0BAAsB5B,GACnC6B,QAAQC,KAAKF,GAEd,EAAKd,UAAS,SAACC,GAAD,sBAAqBA,EAArB,CAAgCf,mBA3FlD,EA8FE2B,mBAAqB,SAACD,GACpB,IAAMK,GAAe,GAAKL,GAAQM,MAAM,IACrCC,KAAI,SAACC,GAAD,OAASrB,SAASqB,EAAK,OAC3BC,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,GAEvC,OAAON,EAAM,GAAKA,EAAM,EAAKJ,mBAAmBI,IAnGpD,kEAU6B,IAAD,OACxBO,KAAKlC,UAAUmC,KACbC,YAAa,MACbC,WACA,SAACC,GAAD,OAAW,EAAK/B,6BAA6B+B,QAdnD,+BAmBI,OACE,6BAAMJ,KAAKK,8BApBjB,iDAyBI,OACE,yBAAKC,UAAW,oBACd,0CAAe,kBAAC,IAAD,CAAOC,MAAM,WACzBP,KAAKxC,MAAME,YAAcsC,KAAKxC,MAAMkB,UAAY,MAEnD,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8B,YAAY,eACZC,KAAK,kBACLvC,MAAO8B,KAAKxC,MAAMC,gBAClBiD,SAAUV,KAAKhC,mBAEjB,kBAAC,IAAD,CAAiB2C,UAAU,UACzB,kBAAC,IAAD,CAAQC,SAAO,EAACL,MAAM,UAAUM,QAASb,KAAKpB,SAC3C,YAIP,kBAAC,IAAD,CAAQgC,SAAO,EAACL,MAAM,OAAOM,QAASb,KAAKnB,yBACxC,qBA5CX,GAAyCiC,a,iBCQ1BC,G,6KAfX,IAAMjC,EAAQ,IAAIC,KAClB,OACE,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKU,IAAKC,IAAMX,UAAU,WAAWY,IAAI,SACzC,kBAAC,EAAD,OAEF,4BAAQZ,UAAU,cACfxB,EAAMG,cADT,WAC4B,uBAAGkC,KAAK,yBAAyBC,IAAI,WAAWjD,OAAO,UAAvD,SAD5B,MACwG,uBAAGgD,KAAK,8BAA8BC,IAAI,WAAWjD,OAAO,UAA5D,gB,GAV9F2C,cCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMhD,c","file":"static/js/main.6c8b113f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, SyntheticEvent } from 'react';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport InputGroup from 'reactstrap/lib/InputGroup';\r\nimport Input from 'reactstrap/lib/Input';\r\nimport Button from 'reactstrap/lib/Button';\r\nimport InputGroupAddon from 'reactstrap/lib/InputGroupAddon';\r\nimport Badge from 'reactstrap/lib/Badge';\r\n\r\ninterface PathNumberState {\r\n  greeting?: string,\r\n  numToCheckInput: string,\r\n  pathNumber: number | undefined\r\n}\r\n\r\nexport class PathNumberComponent extends Component<{},PathNumberState> {\r\n\r\n  state: PathNumberState = {\r\n    numToCheckInput: '',\r\n    pathNumber: undefined\r\n  };\r\n\r\n  readonly numInputEmitter = new Subject<string>();\r\n  readonly numInput$: Observable<string> = this.numInputEmitter.asObservable();\r\n\r\n  componentDidMount(): void {\r\n    this.numInput$.pipe(\r\n      debounceTime(100)\r\n    ).subscribe(\r\n      (input) => this.calculatePathNumberFromInput(input)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>{this.renderCustomNumInputForm()}</div>\r\n    )\r\n  }\r\n\r\n  renderCustomNumInputForm(){\r\n    return (\r\n      <div className={'path-number-form'}>\r\n        <h2>Good Luck: <Badge color=\"success\">\r\n          {this.state.pathNumber || this.state.greeting || '#'}\r\n        </Badge></h2>\r\n        <InputGroup>\r\n          <Input\r\n            placeholder=\"check number\"\r\n            name=\"numToCheckInput\"\r\n            value={this.state.numToCheckInput}\r\n            onChange={this.onNumInputChange}\r\n          />\r\n          <InputGroupAddon addonType=\"append\">\r\n            <Button outline color=\"success\" onClick={this.cleanUp}>\r\n              {'Let Go'}\r\n            </Button>\r\n          </InputGroupAddon>\r\n        </InputGroup>\r\n        <Button outline color=\"info\" onClick={this.calculateDatePathNumber}>\r\n          {'Today\\'s Date'}\r\n        </Button>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  onNumInputChange = (event: SyntheticEvent) => {\r\n    const { value } = event.target as HTMLInputElement;\r\n    this.numInputEmitter.next(value);\r\n  };\r\n\r\n  calculatePathNumberFromInput = (value: string) => {\r\n    const newValue = parseInt(value, 10) || '';\r\n    this.setState((prevState) => (\r\n      {\r\n        ...prevState,\r\n        greeting: undefined,\r\n        numToCheckInput: '' + newValue\r\n      })\r\n    );\r\n\r\n    this.calculatePathNumber(newValue);\r\n  };\r\n\r\n  cleanUp = () => {\r\n    this.setState({\r\n      greeting: '♥️',\r\n      numToCheckInput: '',\r\n      pathNumber: undefined\r\n    });\r\n  };\r\n\r\n  calculateDatePathNumber = () => {\r\n     const today = new Date();\r\n     const dateNum = ''\r\n       + today.getFullYear()\r\n       + (today.getMonth() + 1)\r\n       + today.getDate();\r\n     this.calculatePathNumberFromInput(dateNum);\r\n  };\r\n\r\n  calculatePathNumber = (strNum: string | number): void => {\r\n     const pathNumber = this.calculateDigitsSum(strNum);\r\n\r\n     const message = `Path number is: ${pathNumber}`;\r\n     console.info(message);\r\n\r\n    this.setState((prevState) => ({ ...prevState, pathNumber }));\r\n  };\r\n\r\n  calculateDigitsSum = (strNum: string | number): number => {\r\n    const sum: number = ('' + strNum).split('')\r\n      .map((str) => parseInt(str, 10))\r\n      .reduce((acc, digit) => acc + digit, 0);\r\n\r\n    return sum < 10 ? sum : this.calculateDigitsSum(sum);\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\n\nimport { PathNumberComponent } from './components/path-number.component';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const today = new Date();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <PathNumberComponent/>\n        </header>\n        <footer className=\"App-footer\">\n          {today.getFullYear()} | © <a href=\"https://bit.ly/andriim\" rel=\"noopener\" target=\"_blank\">am0wa</a> | <a href=\"https://bit.ly/am0wa-donate\" rel=\"noopener\" target=\"_blank\">Donate</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}